version: "3.8"

services:
  vault:
    image: hashicorp/vault:latest
    platform: linux/amd64
    container_name: vault
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: admin
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
      VAULT_DEV_LISTEN_HTTP: true
      VAULT_ADDR: http://localhost:8200
    volumes:
      - ./vault/entrypoint.sh:/entrypoint.sh
    entrypoint: [ "/bin/sh", "/entrypoint.sh" ]
    ports:
      - "8200:8200"
    cap_add:
      - IPC_LOCK
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO- http://vault:8200/v1/sys/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - regms_network
      - openldap_network

  mysql:
    image: mysql:latest
    container_name: mysql
    ports:
      - "3306:3306"
    volumes:
      - ./volume/mysql:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: "keycloak"
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -h mysql -u${MYSQL_USER} -p${MYSQL_PASSWORD}" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - mysql_network

  cassandra:
    image: cassandra:latest
    container_name: cassandra
    ports:
      - "9042:9042"
    environment:
      - MAX_HEAP_SIZE=256M
      - HEAP_NEWSIZE=128M
    volumes:
      - ./schema.cql:/docker-entrypoint-initdb.d/schema.cql
    depends_on:
      vault:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "cqlsh", "-e", "DESCRIBE keyspaces" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - regms_network

  neo4j:
    image: neo4j:latest
    container_name: neo4j
    environment:
      - NEO4J_AUTH=neo4j/12345678
    ports:
      - "7474:7474"
      - "7687:7687"
    depends_on:
      vault:
        condition: service_healthy
    volumes:
      - ./volume/neo4j/neo4j_data:/data
      - ./volume/neo4j/neo4j_logs:/logs
      - ./volume/neo4j/neo4j_import:/var/lib/neo4j/import
      - ./volume/neo4j/neo4j_plugins:/plugins
    networks:
      - regms_network

  openldap:
    container_name: openldap
    build:
      context: ./ldap
      dockerfile: Dockerfile
    environment:
      VAULT_TOKEN: admin
      LDAP_ORGANISATION: ${LDAP_ORGANISATION}
      LDAP_DOMAIN: ${LDAP_DOMAIN}
      LDAP_CONFIG_PASSWORD: ${LDAP_CONFIG_PASSWORD}
      LDAP_TLS_VERIFY_CLIENT: "never"
    volumes:
      - ./volume/openldap/ldap_db:/var/lib/ldap
      - ./volume/openldap/ldap_config:/etc/ldap/slapd.d
      - ./ldap/ldif:/container/documents/ldif
      - ./ldap/script:/container/documents/script
    ports:
      - "389:389"
      - "636:636"
    restart: no
    healthcheck:
      test: [ "CMD-SHELL", "ldapsearch -H ldap://openldap:389 -b dc=fayardev,dc=com -s base -D \"cn=admin,dc=fayardev,dc=com\" -w admin \"(objectclass=*)\" || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      vault:
        condition: service_healthy
    networks:
      - openldap_network
      - user_service_network

  phpldapadmin:
    image: osixia/phpldapadmin:0.9.0
    container_name: phpldapadmin
    environment:
      - PHPLDAPADMIN_LDAP_HOSTS=openldap
    ports:
      - "8083:443"
    restart: on-failure
    depends_on:
      openldap:
        condition: service_healthy
    networks:
      - openldap_network

  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: phpmyadmin
    environment:
      PMA_HOST: "mysql"
      PMA_USER: ${PMA_USER}
      PMA_PASSWORD: ${PMA_PASSWORD}
    ports:
      - "8084:80"
    restart: on-failure
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - mysql_network

  keycloak:
    container_name: keycloak
    build:
      context: ./keycloak
      dockerfile: Dockerfile
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: ${MYSQL_USER}
      DB_PASSWORD: ${MYSQL_PASSWORD}
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
    ports:
      - "8080:8080"
    volumes:
      - ./keycloak/realm/keycloak/realm-file.json:/opt/jboss/keycloak/standalone/configuration/realm-file.json
      - ./keycloak/theme/regms-theme:/opt/jboss/keycloak/themes/regms-theme
      - ./keycloak/script/:/opt/jboss/keycloak/custom-script
    depends_on:
      mysql:
        condition: service_healthy
      openldap:
        condition: service_healthy
    networks:
      - openldap_network
      - mysql_network
      - regms_network

  zipkin-server:
    image: openzipkin/zipkin
    container_name: zipkin-server
    environment:
      - STORAGE_TYPE=mem
    ports:
      - "9411:9411"
    restart: on-failure
    networks:
      - regms_network

  config-server:
    container_name: config-server
    build:
      context: config-server
      dockerfile: Dockerfile
    environment:
      PROFILES: ${SPRING_PROFILES}
      SERVER_PORT: ${CONFIG_SERVER_PORT}
    ports:
      - "${CONFIG_SERVER_PORT}:${CONFIG_SERVER_PORT}"
    restart: always
    depends_on:
      vault:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -s -o /dev/null -w '%{http_code}' http://config-server:${CONFIG_SERVER_PORT}/actuator/health/readiness | grep -q '^200$' || exit 1" ]
      interval: 2s
      timeout: 3s
      retries: 15
    networks:
      - regms_network

  eureka-server:
    container_name: eureka-server
    build:
      context: eureka-server
      dockerfile: Dockerfile
    environment:
      PROFILES: ${EUREKA_SERVER_PROFILE}
      SERVER_PORT: ${EUREKA_SERVER_PORT}
      SERVER_HOST: "eureka-server"
      SERVER_URL: "http://eureka-server:${EUREKA_SERVER_PORT}"
      CONFIG_SERVER_URL: "http://config-server:${CONFIG_SERVER_PORT}"
      SPRING_BOOT_ADMIN_SERVER_URL: "http://admin-server:${SPRING_BOOT_ADMIN_SERVER_PORT}"
    ports:
      - "${EUREKA_SERVER_PORT}:${EUREKA_SERVER_PORT}"
    healthcheck:
      test: [ "CMD-SHELL", "curl -s -o /dev/null -w '%{http_code}' eureka-server:${EUREKA_SERVER_PORT}/actuator/health/readiness | grep -q '^200$' || exit 1" ]
      interval: 2s
      timeout: 3s
      retries: 15
    restart: always
    depends_on:
      config-server:
        condition: service_healthy
    networks:
      - regms_network

  gateway-server:
    container_name: gateway-server
    build:
      context: gateway-server
      dockerfile: Dockerfile
    environment:
      SERVER_PORT: ${GATEWAY_SERVER_PORT}
      CONFIG_SERVER_URL: "http://config-server:${CONFIG_SERVER_PORT}"
      EUREKA_SERVER_URL: "http://eureka-server:${EUREKA_SERVER_PORT}"
      EUREKA_SERVER_HOST: "eureka-server"
      SPRING_BOOT_ADMIN_SERVER_URL: "http://admin-server:${SPRING_BOOT_ADMIN_SERVER_PORT}"
      ZIPKIN_SERVER_URL: "http://zipkin-server:${ZIPKIN_SERVER_PORT}"
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID}
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}
      OAUTH2_RESOURCE_SERVER_JWT_ISSUER_URI: ${OAUTH2_RESOURCE_SERVER_JWT_ISSUER_URI}
    ports:
      - "${GATEWAY_SERVER_PORT}:${GATEWAY_SERVER_PORT}"
    healthcheck:
      test: [ "CMD-SHELL", "curl -s -o /dev/null -w '%{http_code}' gateway-server:${GATEWAY_SERVER_PORT}/actuator/health/readiness | grep -q '^401$' || exit 1" ]
      interval: 5s
      timeout: 3s
      retries: 15
    restart: on-failure
    depends_on:
      eureka-server:
        condition: service_healthy
      cassandra:
        condition: service_healthy
    networks:
      - regms_network

  user-service:
    container_name: user-service
    build:
      context: user-service
      dockerfile: Dockerfile
    environment:
      CONFIG_SERVER_URL: "http://config-server:${CONFIG_SERVER_PORT}"
      EUREKA_SERVER_URL: "http://eureka-server:${EUREKA_SERVER_PORT}"
      EUREKA_SERVER_HOST: "eureka-server"
      LDAP_SERVER_URL: ${LDAP_SERVER_URL}
      LDAP_BASE: ${LDAP_BASE}
      LDAP_USERNAME: ${LDAP_USERNAME}
      LDAP_PASSWORD: ${LDAP_PASSWORD}
      OAUTH2_RESOURCE_SERVER_JWT_ISSUER_URI: ${OAUTH2_RESOURCE_SERVER_JWT_ISSUER_URI}
      SPRING_BOOT_ADMIN_SERVER_URL: "http://admin-server:${SPRING_BOOT_ADMIN_SERVER_PORT}"
      ZIPKIN_SERVER_URL: "http://zipkin-server:${ZIPKIN_SERVER_PORT}"
    ports:
      - "0:8080"
    restart: on-failure
    depends_on:
      gateway-server:
        condition: service_healthy
    networks:
      - regms_network
      - user_service_network

  profile-service:
    container_name: profile-service
    build:
      context: profile-service
      dockerfile: Dockerfile
    environment:
      CONFIG_SERVER_URL: "http://config-server:${CONFIG_SERVER_PORT}"
      EUREKA_SERVER_URL: "http://eureka-server:${EUREKA_SERVER_PORT}"
      EUREKA_SERVER_HOST: "eureka-server"
      SPRING_BOOT_ADMIN_SERVER_URL: "http://admin-server:${SPRING_BOOT_ADMIN_SERVER_PORT}"
      ZIPKIN_SERVER_URL: "http://zipkin-server:${ZIPKIN_SERVER_PORT}"
      CASSANDRA_CONTACT_POINTS: cassandra
      OAUTH2_RESOURCE_SERVER_JWT_ISSUER_URI: ${OAUTH2_RESOURCE_SERVER_JWT_ISSUER_URI}
    ports:
      - "0:8080"
    restart: no
    depends_on:
      gateway-server:
        condition: service_healthy
    networks:
      - regms_network

  post-service:
    container_name: post-service
    build:
      context: post-service
      dockerfile: Dockerfile
    environment:
      CONFIG_SERVER_URL: "http://config-server:${CONFIG_SERVER_PORT}"
      EUREKA_SERVER_URL: "http://eureka-server:${EUREKA_SERVER_PORT}"
      EUREKA_SERVER_HOST: "eureka-server"
      SPRING_BOOT_ADMIN_SERVER_URL: "http://admin-server:${SPRING_BOOT_ADMIN_SERVER_PORT}"
      ZIPKIN_SERVER_URL: "http://zipkin-server:${ZIPKIN_SERVER_PORT}"
      CASSANDRA_CONTACT_POINTS: cassandra
      OAUTH2_RESOURCE_SERVER_JWT_ISSUER_URI: ${OAUTH2_RESOURCE_SERVER_JWT_ISSUER_URI}
    ports:
      - "0:8080"
    restart: no
    depends_on:
      gateway-server:
        condition: service_healthy
    networks:
      - regms_network

  feed-service:
    container_name: feed-service
    build:
      context: feed-service
      dockerfile: Dockerfile
    environment:
      CONFIG_SERVER_URL: "http://config-server:${CONFIG_SERVER_PORT}"
      EUREKA_SERVER_URL: "http://eureka-server:${EUREKA_SERVER_PORT}"
      EUREKA_SERVER_HOST: "eureka-server"
      SPRING_BOOT_ADMIN_SERVER_URL: "http://admin-server:${SPRING_BOOT_ADMIN_SERVER_PORT}"
      ZIPKIN_SERVER_URL: "http://zipkin-server:${ZIPKIN_SERVER_PORT}"
    ports:
      - "0:8080"
    restart: on-failure
    depends_on:
      gateway-server:
        condition: service_healthy
    networks:
      - regms_network

  follow-service:
    container_name: follow-service
    build:
      context: follow-service
      dockerfile: Dockerfile
    environment:
      CONFIG_SERVER_URL: "http://config-server:${CONFIG_SERVER_PORT}"
      EUREKA_SERVER_URL: "http://eureka-server:${EUREKA_SERVER_PORT}"
      EUREKA_SERVER_HOST: "eureka-server"
      SPRING_BOOT_ADMIN_SERVER_URL: "http://admin-server:${SPRING_BOOT_ADMIN_SERVER_PORT}"
      NEO4J_HOST: neo4j
      NEO4J_PORT: ${NEO4J_PORT}
      NEO4J_USERNAME: neo4j
      NEO4J_PASSWORD: 12345678
      ZIPKIN_SERVER_URL: "http://zipkin-server:${ZIPKIN_SERVER_PORT}"
      OAUTH2_RESOURCE_SERVER_JWT_ISSUER_URI: ${OAUTH2_RESOURCE_SERVER_JWT_ISSUER_URI}
    ports:
      - "0:8080"
    restart: on-failure
    depends_on:
      gateway-server:
        condition: service_healthy
    networks:
      - regms_network

  like-service:
    container_name: like-service
    build:
      context: like-service
      dockerfile: Dockerfile
    environment:
      CONFIG_SERVER_URL: "http://config-server:${CONFIG_SERVER_PORT}"
      EUREKA_SERVER_URL: "http://eureka-server:${EUREKA_SERVER_PORT}"
      EUREKA_SERVER_HOST: "eureka-server"
      SPRING_BOOT_ADMIN_SERVER_URL: "http://admin-server:${SPRING_BOOT_ADMIN_SERVER_PORT}"
      NEO4J_HOST: neo4j
      NEO4J_PORT: ${NEO4J_PORT}
      NEO4J_USERNAME: neo4j
      NEO4J_PASSWORD: 12345678
      ZIPKIN_SERVER_URL: "http://zipkin-server:${ZIPKIN_SERVER_PORT}"
      OAUTH2_RESOURCE_SERVER_JWT_ISSUER_URI: ${OAUTH2_RESOURCE_SERVER_JWT_ISSUER_URI}
    ports:
      - "0:8080"
    restart: on-failure
    depends_on:
      gateway-server:
        condition: service_healthy
    networks:
      - regms_network

  comment-service:
    container_name: comment-service
    build:
      context: comment-service
      dockerfile: Dockerfile
    environment:
      CONFIG_SERVER_URL: "http://config-server:${CONFIG_SERVER_PORT}"
      EUREKA_SERVER_URL: "http://eureka-server:${EUREKA_SERVER_PORT}"
      EUREKA_SERVER_HOST: "eureka-server"
      SPRING_BOOT_ADMIN_SERVER_URL: "http://admin-server:${SPRING_BOOT_ADMIN_SERVER_PORT}"
      NEO4J_HOST: neo4j
      NEO4J_PORT: ${NEO4J_PORT}
      NEO4J_USERNAME: neo4j
      NEO4J_PASSWORD: 12345678
      ZIPKIN_SERVER_URL: "http://zipkin-server:${ZIPKIN_SERVER_PORT}"
      OAUTH2_RESOURCE_SERVER_JWT_ISSUER_URI: ${OAUTH2_RESOURCE_SERVER_JWT_ISSUER_URI}
    ports:
      - "0:8080"
    restart: on-failure
    depends_on:
      gateway-server:
        condition: service_healthy
    networks:
      - regms_network

  admin-server:
    container_name: admin-server
    build:
      context: admin-server
      dockerfile: Dockerfile
    environment:
      CONFIG_SERVER_URL: "http://config-server:${CONFIG_SERVER_PORT}"
      EUREKA_SERVER_URL: "http://eureka-server:${EUREKA_SERVER_PORT}"
    ports:
      - "0:8080"
    restart: no
    depends_on:
      gateway-server:
        condition: service_healthy
    networks:
      - regms_network

networks:
  regms_network:
    driver: bridge
  user_service_network:
  openldap_network:
  mysql_network: